// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Post {
//   id        String     @default(cuid()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

// model User {
//   id            String       @default(cuid()) @id
//   name          String?
//   email         String?   @unique
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")
//   posts         Post[]
//   @@map(name: "users")
// }

model Trip {
  id                   Int     @id @default(autoincrement())
  tripId               String  @unique @default(cuid()) // Random, unique trip identifier
  adminId              String  @unique @default(cuid()) // Random, unique admin identifier
  tripName             String?
  // userName             String?
  // userEmail            String?
  tripTime             String?
  tripDate             String?
  tripBackground       Json? // To store more complex background data
  departureTime        String?
  destination          String?
  tripDescription      String?
  // underglowColor       String?
  glowColor            String? @default("#34bd34")
  lighterGlowColor     String?
  transparentGlowColor String? @default("#4bfe4b52")
  cars                 Car[] // Assuming cars is an array or complex structure, stored as JSON
}

model Car {
  id               Int    @id @default(autoincrement())
  carName          String
  carColor         String
  seatDistribution Json // Store seat distribution as JSON
  seatNames        Json // Store seat names as JSON
  tripId           Int // Foreign key linking to Trip
  trip             Trip   @relation(fields: [tripId], references: [id])
}

// This Prisma schema defines two models, each of which will map to a table in the underlying database: User and Post. 
// Notice that there's also a relation (one-to-many) between the two models, via the author field on Post and the posts field on User.

// To actually create the tables in your database, you now can use the following command of the Prisma CLI:
// npx prisma db push
