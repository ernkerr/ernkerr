// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Trip {
  id                   Int     @id @default(autoincrement())
  tripId               String  @unique @default(cuid()) // Random, unique trip identifier
  adminId              String  @unique @default(cuid()) // Random, unique admin identifier
  tripName             String?
  // userName             String?
  // userEmail            String?
  tripTime             String?
  tripDate             String?
  tripBackground       Json? // To store more complex background data
  departureTime        String?
  destination          Json?
  tripDescription      String?
  // underglowColor       String?
  glowColor            String? @default("#34bd34")
  lighterGlowColor     String?
  transparentGlowColor String? @default("#4bfe4b52")
  cars                 Car[] // one-to-many relationship with Car
  users                 User[] // one-to-many relationship with Car

}

model Car {
  id               Int    @id @default(autoincrement())
  carId            String @unique @default(cuid()) // Unique identifier for upsert
  carName          String?
  carColor         String?
  numSeats         Int?
  seatDistribution Json? // Store seat distribution as JSON
  seatNames        Json? // Store seat names as JSON
  departureDate    String?
  departureTime    String?
  departureLocation String? 
  tripId           String // Foreign key linking to Trip
  trip             Trip   @relation(fields: [tripId], references: [tripId]) 
  // fields: [tripId]: specifies that the trtripId in the car model is the foreign key that links each car to the trip 
  // references [tripId]: specifies the reference field  
  // represents the relationship between a car and it's associated trip (not an actual column)
  // it's a virtual field that prisma provides to navigate the relationship programmatically 

}

// from James: sign into google - will send payload back to app - server needs to recieve payload and create a user with it 

model User {
  id       Int     @id @default(autoincrement())
  googleId String  @unique
  email    String  @unique
  name     String?
  avatar   String?
  tripId           String // Foreign key linking to Trip
  trip             Trip   @relation(fields: [tripId], references: [tripId]) 
}


// This Prisma schema defines two models, each of which will map to a table in the underlying database: User and Post. 
// Notice that there's also a relation (one-to-many) between the two models, via the author field on Post and the posts field on User.

// To actually create the tables in your database, you now can use the following command of the Prisma CLI:
// npx prisma db push


// npx prisma migrate dev 
// cmd will update the schema
// run it from carpoolio (root dir) 
// npx prisma migrate dev --name update-destination --schema=./server/prisma/schema.prisma
// npx prisma generate --schema=./server/prisma/schema.prisma